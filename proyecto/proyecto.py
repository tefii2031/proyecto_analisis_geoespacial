"""Tarea 3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/161YdXmre5OWCn3D7Ik8Qqxcs55R8PQUG

#Tarea 03 - Análisis de datos geoespaciales mediante pandas, plotly, geopandas y folium

## Estudiantes:

Daniel Salazar Mora - B87214
Stephanie María Leitón Ramírez - B74106

##Importando las bibliotecas
"""

import os
import requests
import zipfile
import csv
from functools import partial
#from shapely.geometry import Point, mapping, shape
#from shapely.ops import transform
from owslib.wfs import WebFeatureService
from geojson import dump
import fiona
import fiona.crs
import math
import folium
import geopandas as gpad
import pandas as pd
import contextily as cx
import matplotlib.pyplot as plt
# %matplotlib inline
import plotly.express as px
from folium import Marker
from folium.plugins import MarkerCluster
from folium.plugins import HeatMap
import streamlit as st

#
# Configuración de la página
#
st.set_page_config(layout='wide')


"""
## Obtención de datos
Se usan las capas de Web Feature Service (WFS) publicadas por el Instituto Geográfico Nacional (IGN) en el Sistema Nacional de Información Territorial (SNIT):

Límite cantonal 1:5000
https://www.snitcr.go.cr/ico_servicios_ogc_info?k=bm9kbzo6MjY=&nombre=IGN%20Cartograf%C3%ADa%201:5mil
 
Red vial 1:200000
https://www.snitcr.go.cr/ico_servicios_ogc_info?k=bm9kbzo6NDI=&nombre=IGN%201:200mil

"""
#
# Cargar datos
#
redvial_file = gpad.read_file('../datos/redvial.geojson')
cantones_file = gpad.read_file('../datos/cantones.geojson')
#convertir capas
redvial_file.to_crs(5367)
cantones_file.to_crs(5367)
#
# Sidebar con filtro de categoria
#
lista_categorias = redvial_file.categoria.unique().tolist()
lista_categorias.sort()
filtro_categoria = st.sidebar.selectbox('Seleccione la categoría de red vial', lista_categorias)

""" 
## Tabla de datos

Se unen las tablas de Canton con la de Red Vial

"""

#Unir las capas con intersección espacial 
redvial_x_canton = cantones_file.overlay(redvial_file, how='intersection', keep_geom_type=False)
redvial_x_canton['longitud'] = redvial_x_canton['geometry'].length /1000


# Group by de canton y categorias
redvial_x_canton_agrupados = redvial_x_canton.groupby(['canton', 'categoria']).agg({'longitud': 'sum', 'area': 'min'})
redvial_x_canton_agrupados = redvial_x_canton_agrupados.reset_index()

# Se separan las categorias como columnas al añadir un multinivel
redvial_x_canton_agrupados = redvial_x_canton_agrupados.pivot_table('longitud', ['canton', 'area'], 'categoria')

# reordenar columnas volviendo a un sólo nivel de columnas
redvial_x_canton_agrupados.reset_index( drop=False, inplace=True )
redvial_x_canton_agrupados.reindex(['CAMINO DE TIERRA','AUTOPISTA',
                                        'CARRETERA PAVIMENTO DOS VIAS O MAS',
                                        'CARRETERA PAVIMENTO UNA VIA',
                                        'CARRETERA SIN PAVIMENTO DOS VIAS'], axis=1)

# calcular longitud total
redvial_x_canton_agrupados['longitud'] = redvial_x_canton_agrupados[['CAMINO DE TIERRA','AUTOPISTA',
                                                                        'CARRETERA PAVIMENTO DOS VIAS O MAS',
                                                                        'CARRETERA PAVIMENTO UNA VIA',
                                                                        'CARRETERA SIN PAVIMENTO DOS VIAS'
                                                                       ]].sum(axis=1)


""" 
Filtrado de datos según la categoria
"""

#calcular densidad de la categoria dada
redvial_x_canton_agrupados['densidad'] = redvial_x_canton_agrupados[filtro_categoria].div(redvial_x_canton_agrupados['area'])
# Muestra usando filtro
redvial_x_canton_agrupados[["canton", filtro_categoria, "densidad"]]

""" 
## Gráfico Plotly de Barras

Gráfico de los 15 cantones de mayor longitud total de red vial filtrados por categoría.

"""
# Dataframe filtrado para usar en graficación
longitud_grafico = redvial_x_canton_agrupados[[ 'canton', 
                                                filtro_categoria
                                              ]].sort_values(filtro_categoria, ascending=[False]).head(15)
#Gráfico plotly de barras apiladas 
fig = px.bar(longitud_grafico, x="canton", y=[filtro_categoria], 
                                 title="Cantones de mayor longitud total de red vial de la categoría: " + filtro_categoria)
fig.show()

""" 
## Gráfico Plotly de Pastel

Gráfico de los 15 cantones de mayor longitud total de red vial filtrados por categoría.

"""

#ordenar los valores por longitud
pastel = redvial_x_canton_agrupados[['canton', filtro_categoria]].sort_values(filtro_categoria, ascending=[False])
#reset al index
pastel = pastel.reset_index()
#extraer la longitud de valor 15
longitud_15= pastel[filtro_categoria].loc[14]
#cambiar el canton a los siguientes valores luego del 15
pastel.loc[pastel[filtro_categoria] < longitud_15 , 'canton'] = 'Otros cantones' 
#Gráfico plotly de pastel 
fig = px.pie(pastel, values=filtro_categoria, names='canton', title='Porcentaje de los 15 cantones de mayor longitud de la categoría: '+ filtro_categoria +' de la red vial en el país')
fig.show()

""" 
## Mapa folium 
Un mapa folium con las siguientes capas:
* Capa base (OpenStreetMap, Stamen, etc.).
* Capa de coropletas correspondiente a la densidad de la red vial en los cantones.
* Líneas de la red vial.

Y los siguientes controles:
* Control para activar y desactivar capas.
* Escala
"""
